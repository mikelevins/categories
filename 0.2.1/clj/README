This directory contains the Clojure implementation of Categories.

The file defsystem.clj defines a simple system-loader that compiles
and loads all the sources needed for a working version of
Categories. To use it, begin by editing the pathnames at the top of
the file "categories.clj" to correspond to your system, then start a
Clojure session and load "categories.clj". If all goes well, you
should end up with a Clojure with a working version of Categories.

The remainder of this file gives the Clojure version of the Categories
API syntax, and a few notes about things you should be aware of when
using Categories with Clojure.

I. Setters in Clojure

Clojure emphasizes immutable data. Most Clojure data structures are
immutable; it doesn't make sense--and isn't possible--to assign values
to their fields. Clojure provies a small set of mutable
value-containers with well-defined and thread-safe semantics. The fact
that these mutable containers are thread-safe means that you won't see
race conditions as a result of using them, but it also means that
assigning to them is a much more costly operation than simple
assignment in older, more conventional languages. You should be aware
of the higher cost of assignment in Clojure.

Categories structure types are immutable by default, but it's possible
to create a mutable structure by specifying ":setter true" in a key
definition. If you define a structure as mutable, Categories creates
instances that use Clojure refs to enable you to assign values to the
settable fields. This convenience is not without cost. Categories does
not sidestep Clojure's safety guarantees; it works within
them. Assigning a value to a structure key works, but the cost is that
of Clojure's thread-safe mutation, not that of simple assignment.

If you're working in Clojure, you should be accustomed to using
immutable data structures, and building immutable structure types
should not be any extra burden. Before defining a key with a setter,
think carefully about whether you actually need the structure to be
mutable, and keep in mind that every assignment to a key means
involving Clojure's transactional memory subsystem.

II. Java Interfaces in the -c3- Domain

Java provides no way to order the specificity of interfaces. A Java
interfaces doesn't necessarily have any superinterfaces, and may not
have any defined relationship to any other Java class. If an interface
has no defined relation to any other class, then we can't
deterministically compute any subtype/supertype relations for the
interface. The most we can know in the general case is whether a
particular class implements a particular interface.

In most cases, the inability to order interfaces by specificity has no
impact on Categories-style code. Basically, we don't care about
interfaces, because they contribute no representational structure and
no concrete behavior. The only way an interface can enter into a
program is through a concrete class that implements it--so the Clojure
implementation of the C3 domain includes Java classes in its type
graph, but not Java interfaces. It is trivial to linearize Java
classes, because they support only single inheritance. Linearizing the
supertypes of a Java class is a simple matter of asking for its
superclass, and then that class' superclass, and so on, until we reach
java.lang.Object, and this is exactly what the Clojure implementation
of C3 does.

A problem arises only if we for some reason want to define a method on
a Java interface. In most cases, it's not necessary to do that; simply
define methods on the classes that implement the interfaces,
instead. It's conceivable, though, that you might really want to
define a method on an interface. If you do, all is not lost; you just
need to add the interface to the C3 type graph using derive-type!.

If you try to define a method on an interface before it has been added
to the type graph, you'll get an unknown-type error. Use derive-type!
to add the interface to the C3 type graph in the usual way:

   (derive-type! my.java.Interface [<anything>])

After adding the interface to the type graph, you can define methods
on it normally.

If the solution is that easy, why doesn't the -c3- domain just add all
Java interfaces to the type graph automatically? Because there is no
way to know where in the type graph to add them. As I said above, Java
offers us no way in general to know what an interface's relation to
the rest of the Java types is, so we can't automatically compute how
to add a set of interfaces. Instead, you must decide consciously what
relationship you want the interfaces to have to the rest of the C3
type graph. As an example, you might define a primitive type called
<ordered>, and then add it and an interface to the graph like this:

  (derive-type! <ordered> [<anything>])
  (derive-type! clojure.lang.Counted [<ordered>])

One of the reasons for the existence of Categories is that sometimes
we want to make our own decisions about type relationships,
independent of how the types are represented, or what methods may be
defined on them. We can exploit the flexibility that approach gives us
to integrate Java interfaces in whatever way we find most useful.

III. The Categories API in Clojure

This section gives examples of the Clojure syntax for the Categories API.

Types
-----

  <anything>
  <type>
  <structure>
  <synonym> 
  <category>
  <primitive-type>


Type Functions And Macros
-------------------------

(def <my-user>
  (structure [<user> <trial>] 
    (:promotion-code :default "" :setter false))

(derive-type! -c3- <my-user> [<user> <trial>])

(remove-type! -c3- <my-user>)

(get-key $my-user :promotion-code)

(set-key! $my-user :name "Wilma")

  Note: in most cases you're likely to see an error message, because
        structures are immutable by default. Naturally, set-key!
        doesn't work on immutable structures.

(make <my-user> :name "barney" :password "bambam" 
                :start-date "2009-12-1"
                :promotion-code "Q"))

(def <count> (synonym java.lang.Integer))

(def <name> (category java.lang.String clojure.lang.Symbol clojure.lang.Keyword))

(type 5)
(type (make <my-user> :name "barney" :password "bambam" 
                      :start-date "2009-12-1"
                      :promotion-code "Q"))

(instance-of? 5 <count>)
(instance-of? 5 java.lang.Integer)


Functions
---------

(def print-user (make-function -c3-))

(add-method! print-user
             (method [[u <my-user>]]
                 (next-method u)
                 (print (format "  Promotion-code: %s" 
                           (get-key u :promotion-code)))))

(remove-method! print-user [<my-user>])


Domains
-------

-c3-

(direct-supertypes -c3- <my-user>)

(all-supertypes -c3- <my-user>)
